// frontend/src/components/GameBoardScreen.jsx
import React, { useContext } from "react";
import { GameContext } from "../contexts/GameContext";

export default function GameBoardScreen() {
  const { gameId, playerInfo, diceResult, rollDice, gameState } = useContext(GameContext);

  if (!gameState) {
    return <p>Waiting for game state...</p>;
  }

  const { players, playerOrder, currentTurn } = gameState;

  // Build a 40‐cell board: just an array [0,1,2,...,39]
  const boardSpaces = Array.from({ length: 40 }, (_, i) => i);

  // Helper: get token(s) on a given position
  const tokensAt = (pos) => {
    return playerOrder
      .filter((pid) => players[pid].position === pos)
      .map((pid) => (
        <span key={pid} className="inline-block w-4 h-4 bg-blue-500 text-xs text-white text-center rounded-full m-0.5">
          {players[pid].name[0].toUpperCase()}
        </span>
      ));
  };

  // Is it *my* turn?
  const isMyTurn = currentTurn === playerInfo.id;

  return (
    <div className="p-4 bg-gray-100 min-h-screen">
      <h2 className="text-xl mb-2">Game ID: {gameId}</h2>
      <p className="mb-2">
        You are: <strong>{playerInfo.name}</strong> (ID: {playerInfo.id})
      </p>
      <p className="mb-4">
        Current Turn: <strong>{players[currentTurn].name}</strong>
      </p>
      {isMyTurn ? (
        <button
          className="bg-purple-600 text-white px-4 py-2 rounded mb-4"
          onClick={rollDice}
        >
          Roll Dice
        </button>
      ) : (
        <button className="bg-gray-400 text-white px-4 py-2 rounded mb-4" disabled>
          Not Your Turn
        </button>
      )}
      {diceResult && (
        <p className="mb-4">
          Last Roll: {diceResult[0]} + {diceResult[1]}
        </p>
      )}
      <div className="grid grid-cols-8 gap-1">
        {boardSpaces.map((spaceIdx) => (
          <div
            key={spaceIdx}
            className="h-16 w-16 bg-white border flex items-center justify-center relative"
          >
            <div className="absolute top-0 left-0 text-xs text-gray-500 p-1">{spaceIdx}</div>
            <div className="flex">{tokensAt(spaceIdx)}</div>
          </div>
        ))}
      </div>
    </div>
  );
}
